<!-- vim: set syntax=markdown: -->

# Day 4

## Part 1

<!-- livebook:{"livebook_object":"cell_input","name":"input","type":"text","value":"17,58,52,49,72,33,55,73,27,69,88,80,9,7,59,98,63,42,84,37,87,28,97,66,79,77,61,48,83,5,94,26,70,12,51,82,99,45,22,64,10,78,13,18,15,39,8,30,68,65,40,21,6,86,90,29,60,4,38,3,43,93,44,50,41,96,20,62,19,91,23,36,47,92,76,31,67,11,0,56,95,85,35,16,2,14,75,53,1,57,81,46,71,54,24,74,89,32,25,34"} -->

```elixir
input =
  IO.gets("input: ")
  |> String.trim()
  |> String.split(",")
  |> Enum.map(&Integer.parse(&1))
  |> Enum.map(fn {number, _rest} -> number end)
```

<!-- livebook:{"livebook_object":"cell_input","name":"boards","type":"textarea","value":"59 98 84 27 56\n17 35 18 64 34\n62 16 74 26 55\n21 99  1 19 93\n65 68 53 24 73\n\n 1 86 98 16  6\n93 69 33 49 71\n54 43 77 29 47\n82 73 99 31 27\n28 48 36 89 20\n\n80 92 52 23 67\n47 38  4 25 65\n54 31 77 13 39\n18 70 17 22 24\n14 99 30 96  8\n\n88 97 17 48 71\n60 50 15 37 24\n78  6 79 56 91\n70 30 72 46 73\n41 42 32  7 59\n\n37 20 34 32  3\n48 40  4 27 42\n94 87 14 24 57\n17 18 90 44 76\n43 28 46  5 19\n\n 3 69 88 77 74\n 6 44 12 81 49\n73 23 32 97 53\n83  4 85 38 61\n10 87 50 60 47\n\n84 17 58 31 79\n25 97 35 72 16\n11 91 75 67 41\n 6 85 27 44 86\n43 40 54 95 68\n\n70 55 88 22 50\n96 98 48 85 75\n95 72  8 26 14\n16 63 46 91 78\n93  3 83 99 21\n\n29  7  6 75 36\n37 93 23 63 65\n56 79 87 48 49\n27 24 80 53 33\n86 46 95 99 42\n\n33 30 72 99 65\n49 93 76 36 53\n26 35 86 97 12\n47 19 54 25  3\n75 34 50  8 95\n\n41 69 49  0 48\n73  9 72 61 85\n56 20 58 57  1\n12 82 38 21 46\n34 83 11 68 53\n\n54 79 35 24 33\n89 77 75 76 96\n94  2 38 39 40\n63 51 34 12 30\n20 21 70 26 23\n\n82 62 87 42 19\n94 65 18  4 33\n 0 30 27 55 66\n76 46 78 14 48\n57 53 43 15 75\n\n94 38 96 44 46\n10 14 75 97 76\n 7 61 56 36  1\n81 67 49 78 86\n31 65 88 24 63\n\n22  2 51 36 24\n78 62 67 13 84\n32 91 59 66 33\n73 80 54  3 85\n65 70 98 79 55\n\n80  1 23 70 47\n91 88 24 56 11\n98 79 72 31 86\n 7 87 28 25 92\n74 20 62 46 71\n\n62 45 91 49 96\n73  3 57 30 95\n74 31 12 17 40\n53 39 63 55  1\n58 82 23 64 84\n\n11 71 60 51 63\n90 64 79 88 39\n65 13 76 66 26\n20 34 40  0 95\n21 72 62 83 77\n\n24 70 72 60 63\n53 69 94 74 57\n25 41 20 84 45\n76 68 16 15 18\n75 58  0 10 47\n\n17 23 90  8  4\n88 24 74 12 18\n62 99 67 49 92\n29 64 16 21 25\n 9 19 30 60 53\n\n28 85 61 76 29\n15 33 89 48  1\n68 77 11 93 51\n87 59  8  5 54\n65 34 18 81 43\n\n53  9 31 23 35\n17 59 91 43 25\n 7 90  5 33 58\n21 68 29 52 15\n86  3 48 11 26\n\n78 77 63 91 24\n40 31 54 17 72\n84 21 69 45 38\n89 12 70 42 65\n27 52 97 64 94\n\n36 23 33 20 70\n35 10 52 18 34\n22 19 98 93  5\n67 94 90 51 62\n38  6 53 64 76\n\n90 69 16 70 34\n57 94  3 61 36\n60 22 47 97 31\n30  8  4 84 91\n12 65 37 18 72\n\n12 93 39  1 96\n 0 13 67 55 72\n84  9 30 40 62\n10 74 79 41 85\n51 52 47 98 75\n\n63 82 76 42 50\n40 75 85 10 99\n 6 34 22 43 15\n87 57 79 66 55\n97 24 72 54 68\n\n68 39 48 66 81\n26  9 96  5 38\n22  1 57 30 98\n 2 43 14 50 97\n56 37 62 13 29\n\n 4  9 98 28 11\n21 20 10 39 69\n85 47 87 94 36\n88 75 35 22 91\n86 44  2 56 12\n\n98 65 26 91 86\n 7 25 45 80 22\n39  2 95 69 46\n84 49 68 85 47\n23 90 40  4 44\n\n63  2 32 56 52\n30 11 33 10 70\n36 34 88 82 37\n62 57 40 28 96\n58 73 41 69 85\n\n 8 27 64 80 19\n87 79 99 53 95\n84  6 31 22  3\n44 91 47 41 82\n16 74 43 29 70\n\n32 67 62 81 36\n47 61 74 60 57\n27 35 38  4 26\n34 72  2 21 90\n49 84 42 31 76\n\n 3 53 26 35 12\n20 30  0 76 80\n96 46 89 83 48\n 7 13 98 66 75\n97 82 55  5 68\n\n22 61 69 36 77\n95 53  4 21 94\n 5 17 18  2 96\n 0 81 56 31 66\n70 75 55 58 42\n\n97 10 40 80 43\n57 90 53 34 13\n38  7 47 86 89\n51 65 76 85  0\n48 62 28 42 35\n\n 6 21 88 78 22\n30 90 65 53 66\n31 36  3 99 32\n52 13 69 68 72\n57 97 79 73 94\n\n77 76 81 94 20\n45 17 52 49 18\n98 56 21 32 80\n63 99 87 24 43\n61  1 16  3 40\n\n 3 45 98 84 31\n99 23 90 71 27\n24 60 46 69 37\n83 62  6 36 49\n42 55 11 68 17\n\n60 22 98 46  0\n59  9 28 16 26\n56 33 43 93 31\n73 27 29  6 94\n13 12 51 61 45\n\n85 22 48 27 58\n86 23 65 19 91\n50 36 97 10 78\n15  9  3 72 96\n31  1 87  8 14\n\n79 48 30 50 77\n92 71 90 25 14\n39 45 98  1 84\n47  8 66 60 74\n80 75 55 62 35\n\n45 60 77 16 18\n78 21 23 44 56\n36 27 99 80 61\n81 71 75 58  5\n53 49 46  9 38\n\n56  6 53 79 33\n 3 62 30 83 96\n 1 34 12 44 47\n58 35 87 91 69\n20 85  0 60  4\n\n 9 87 28 94 66\n 3 10 27 13 54\n40  0 43 35 85\n67 34 81 92 58\n21 53 79  6 19\n\n23 72  9  1 57\n61 73 33 52 64\n 7 21 92 84 46\n50 56 38 25 76\n75 67 47 81 37\n\n50  4 98 48 85\n46 39 45 93 69\n60  5 79 68 21\n31 67  8 74 16\n88  3 15 84 23\n\n53 61 99 17 25\n16 86 27 83 46\n 9 75 67 19 10\n84 81 76 88  8\n49 97 79  3 21\n\n69 40 56 75  4\n34 16 79 46 77\n19 54 35 74 84\n73 50 20 47 10\n62 99 51  6 92\n\n53 79 80 96 45\n28  0  2 35 33\n51 70 34 90 72\n30 54 41 38 15\n91 73 97 23 49\n\n20 78 55 10 18\n61 89 14  2 17\n93 96 41 70 76\n19 37 47 80 71\n82 92 90  0 57\n\n29 40 64 62 32\n56 58  7 68 67\n16 76  4 50 13\n37 90 66 60 83\n33 97 25 80 54\n\n56 91 67 49 98\n85 15 25  1 32\n24 93 86 54 52\n22 73 23 63 94\n65 72 14 26 55\n\n74 38 19 20 11\n57 86 87 29 89\n13 21 75 85 44\n33 84 56 76 92\n52 37 64 72 73\n\n45 14 60 32 59\n66 49 16  2 94\n19 10 68 90 78\n95  8 93 61 24\n85 48 29 28 84\n\n 6 74  4 42 86\n88 79  8 96 66\n63 85 89  9 12\n57  1 67 38 32\n87 26 71 78 46\n\n78 49 54 77 56\n18  4 50 14 23\n16 12 25 64 39\n75  2 22 41 37\n88 19 93 85 53\n\n79  6 52 48 37\n51 67 66 42  3\n63 43 39 56 91\n 8 18  7 29 89\n55 71 45 36 38\n\n 9  8 42 35 79\n11 62  7 93 68\n28 26 61 96 19\n29 88 81 43 98\n84 80 23 77 17\n\n90 21 51 43 60\n95 12 34 77 29\n75 82 47 92 15\n56 73 52 64  7\n17 85 94 41 46\n\n43 75 58 76 35\n37 41 65 60 14\n90 51 83 32 88\n26 99 16 68 64\n44 97 24 29 20\n\n50 32 90 95 27\n34 38 82 39 15\n60 66 68 40 22\n85 98 87 58  7\n30 54 97 11 33\n\n77 30 84 12  0\n34  6  5 70 44\n87 67  4 61 75\n31 96 52 57  8\n21 41 13 45 62\n\n 6 26 69 27 75\n61 33 88 38 20\n 9 56 70 98 82\n80 76 55 66 29\n97 84 42 77 73\n\n83 35 25 47 69\n70 31 93 56 57\n97 14 26 55 27\n51 39 98 77 17\n45 86  6 95 89\n\n18  9 29 14 38\n69 64 30 90 57\n75 97 80 94 44\n85 41 11 96 86\n33 81 58 26 49\n\n31 11 12 75 96\n68 85 95  2 47\n35 57 87 41  6\n65 50 74 25 59\n26  9 30 17 88\n\n54 59 23 46 37\n56 43 91 75  1\n18 96 11 84 14\n30 94 82  2  8\n67 90 99 33 34\n\n51 90 80 71 32\n73 18  8 35 58\n53 91 60 74 37\n76  9 25 17 31\n54 84 43 88 34\n\n20  8 27 64 40\n11 99 85 72 32\n62  7 55 83 35\n96 48 12 33 30\n73  4 21 16 75\n\n14 15 52 30 88\n97 94 59 56 77\n31 12 41 36 20\n62  3  2 38 82\n68 45 33 91 61\n\n 4 11  9 89 60\n97 70 18 57 40\n98 75  6 50 88\n56 30 21 80 83\n 7 73 65 23 69\n\n70 23 49 90 82\n 1 68 95 33 76\n72 89 39 51 59\n 8 65 88 73 24\n47 26 80  5 34\n\n13 50 15 43 51\n 7 58 40 68 91\n62 18 47 79 42\n60  1 74 71 86\n25 53 36 10 70\n\n92 96 37 63 61\n49 94 65 13 23\n15 75 52 10 82\n30 59 14 43 48\n53 62 21 35  0\n\n79 84 95 93 41\n58 94  6 20 92\n88  0 78 16 21\n40 96 24  2 66\n85 87 13 14 80\n\n33 53 54 20 37\n18 88 70 61 85\n90 76 12 44 79\n81 69  9 98 74\n14 13 15 36 93\n\n61 46 67 24 98\n80 36 41 86  9\n82 75 40 42 58\n49 51 99  5 90\n91 97 26 20 56\n\n90 22 94 41  7\n13 16 51 44 32\n 5 43 60 19 49\n38 96 23 12 79\n57 85 58  3 48\n\n52  3 40 90 43\n14 64 59 93 56\n99 94 61 72 46\n84 87 48 22 91\n 2 67 35 76 92\n\n48 82 26 38 90\n50 98 30 76 60\n 1 49 92 99 77\n59 97 22 47 93\n81 35 43 23 53\n\n41  5 57 29  2\n90 23 55 75 96\n48 60 86 67  8\n34 12 59  6 45\n89  1 44 49 76\n\n76 81  4 44 22\n89 84 85 70 11\n51 97 50 25 95\n31 27 21 40 87\n65 91 69 58 23\n\n96 42 98 38 52\n39 57 40 94 91\n87 79 23 36 82\n 4 72 95 22 43\n51 73 59 15 44\n\n99 29 30 90 33\n60 61 65  8 56\n89 87 25 95 55\n 6 39 69 98 20\n76 81 85 16 93\n\n86 35 92 90 19\n26 55 21 12 33\n 3 82 41 47 15\n14 94 63 62 23\n95 65  2  0 72\n\n22  8 49 39 36\n63  7 61 92 51\n25 96 43  1 46\n28 64 59 47 27\n87 65 48 88 37\n\n58 59 93 23 70\n18 97 83 73 21\n90 14 13 95 45\n44  6 10 80 15\n92 56 26 76 52\n\n34 68  7 52 51\n17 25 97 35 78\n 2 40 89 67 24\n73 37 45  0 64\n57 66 47  4 12\n\n11 35 14 69 13\n86 90  2 19 27\n70  0  6 31 98\n64 23 54 88 26\n94 43 59 71 36\n\n28  9 67 39 20\n16 44 47 69 96\n19 45 30 91 68\n75 56 37 35 52\n27 42 93 43 84\n\n24 67 39 70 93\n71 72 12 85  1\n77 59 66  5 76\n54 13 35 40 82\n51 25 64  6 19\n\n65 36 92 51 74\n55 90 68  9 97\n28 56 35 34 73\n50 10 61 37 30\n79 49 96 18  1\n\n57  8 17 51 19\n86 97 21 84 20\n32 44 33 27 62\n 3 76 70 58 79\n36 74 75 65 71\n\n24 65 37 29 66\n26 60 49 45 61\n23 22 83 71 10\n46 59 86 40 12\n64 74 27  8 78\n\n63 79 80 54 68\n16 89 60 96 31\n 6 91 32 37 86\n93 20 61 70 21\n58 88 11 15 39\n\n36 44 75  3 29\n58 32 84 37 48\n76 99 65 91 24\n22 20 42 57 49\n50 85 52  2 54\n\n77 65 38 15 12\n50 53 10 34 40\n87 60  4 68 71\n 5 35 28 63 66\n11 86  9  8 49\n\n 3 71 46 10  1\n83 12 52 99 24\n96 87 85 51 33\n11 69 62 34 41\n88 22 89 21 49\n\n55  0 82 40 48\n71 32  3 90 92\n39 69 63 86 60\n51 36 66 12 46\n73 57 58 33 94"} -->

```elixir
boards =
  IO.getn("boards: ", 1_000_000)
  |> String.split("\n\n")
  |> Enum.map(&String.split(&1, "\n", trim: true))
  |> Enum.map(fn board ->
    Enum.map(board, fn line ->
      line
      |> String.split(" ", trim: true)
      |> Enum.map(&Integer.parse(&1))
      |> Enum.map(fn {number, _rest} -> {number, false} end)
    end)
  end)
```

```elixir
defmodule AdventOfCode.DayFour do
  def solve_part_one(input, boards) do
    solve(input, boards)
  end

  def solve_part_two(input, boards) do
    solve_v2(input, boards)
  end

  defp solve([], boards), do: boards

  defp solve([current | rest], boards) do
    case check_boards(boards, current) do
      {:ok, solution} -> solution
      {:cont, marked_boards} -> solve(rest, marked_boards)
    end
  end

  defp check_boards(boards, current) do
    boards =
      boards
      |> Enum.map(&mark_board(&1, current))

    Enum.reduce(boards, {:cont, boards}, fn board, acc ->
      if check_board(board) do
        {:ok, get_solution(board, current)}
      else
        acc
      end
    end)
  end

  defp solve_v2([], boards), do: boards

  defp solve_v2([current | rest], boards) do
    case check_boards_v2(boards, current) do
      {:ok, solution} -> solution
      {:cont, marked_boards} -> solve_v2(rest, marked_boards)
    end
  end

  defp check_boards_v2([board], current) do
    board = mark_board(board, current)

    if check_board(board) do
      {:ok, get_solution(board, current)}
    else
      {:cont, [board]}
    end
  end

  defp check_boards_v2(boards, current) do
    boards =
      boards
      |> Enum.map(&mark_board(&1, current))
      |> Enum.filter(fn board -> !check_board(board) end)

    {:cont, boards}
  end

  defp mark_board(board, current) do
    Enum.map(
      board,
      fn line ->
        Enum.map(
          line,
          fn {line_number, status} ->
            case status do
              false -> {line_number, line_number == current}
              true -> {line_number, true}
            end
          end
        )
      end
    )
  end

  defp check_board(board) do
    has_winning_col?(board) || has_winning_row?(board)
  end

  defp has_winning_col?(board) do
    Enum.any?(board, fn line -> check_col(line) end)
  end

  defp has_winning_row?(board) do
    board
    |> Enum.zip()
    |> Enum.map(&Tuple.to_list(&1))
    |> has_winning_col?()
  end

  defp check_col(line) do
    line_count = Enum.count(line)

    count =
      line
      |> Enum.filter(&is_marked?(&1))
      |> Enum.count()

    count == line_count
  end

  defp get_solution(board, current) do
    unmarked_sum =
      Enum.reduce(board, 0, fn line, acc ->
        line_sum =
          line
          |> Enum.filter(fn el -> !is_marked?(el) end)
          |> Enum.map(fn {number, _status} -> number end)
          |> Enum.sum()

        line_sum + acc
      end)

    unmarked_sum * current
  end

  defp is_marked?({_number, true}), do: true
  defp is_marked?({_number, false}), do: false
end

IO.puts(AdventOfCode.DayFour.solve_part_one(input, boards))
IO.puts(AdventOfCode.DayFour.solve_part_two(input, boards))
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
ExUnit.start(autorun: false)

defmodule DayFourTest do
  use ExUnit.Case, async: true

  @example_input [
    7,
    4,
    9,
    5,
    11,
    17,
    23,
    2,
    0,
    14,
    21,
    24,
    10,
    16,
    13,
    6,
    15,
    25,
    12,
    22,
    18,
    20,
    8,
    19,
    3,
    26,
    1
  ]
  @example_boards [
    [
      [{22, false}, {13, false}, {17, false}, {11, false}, {0, false}],
      [{8, false}, {2, false}, {23, false}, {4, false}, {24, false}],
      [{21, false}, {9, false}, {14, false}, {16, false}, {7, false}],
      [{6, false}, {10, false}, {3, false}, {18, false}, {5, false}],
      [{1, false}, {12, false}, {20, false}, {15, false}, {19, false}]
    ],
    [
      [{3, false}, {15, false}, {0, false}, {2, false}, {22, false}],
      [{9, false}, {18, false}, {13, false}, {17, false}, {5, false}],
      [{19, false}, {8, false}, {7, false}, {25, false}, {23, false}],
      [{20, false}, {11, false}, {10, false}, {24, false}, {4, false}],
      [{14, false}, {21, false}, {16, false}, {12, false}, {6, false}]
    ],
    [
      [{14, false}, {21, false}, {17, false}, {24, false}, {4, false}],
      [{10, false}, {16, false}, {15, false}, {9, false}, {19, false}],
      [{18, false}, {8, false}, {23, false}, {26, false}, {20, false}],
      [{22, false}, {11, false}, {13, false}, {6, false}, {5, false}],
      [{2, false}, {0, false}, {12, false}, {3, false}, {7, false}]
    ]
  ]

  test "part 1" do
    assert 4512 = AdventOfCode.DayFour.solve_part_one(@example_input, @example_boards)
  end

  test "part 2" do
    assert 1924 = AdventOfCode.DayFour.solve_part_two(@example_input, @example_boards)
  end
end

ExUnit.run()
```
